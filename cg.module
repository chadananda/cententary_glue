<?php

// $Id$

/**
 * Implementation of hook_ctools_plugin_api().
 */
function cg_ctools_plugin_api($module, $api) {
  if ($module == 'auto_opengraph' && $api == 'auto_opengraph') {
    return array('version' => 1);
  }
}

function cg_menu() {
  $items['admin/centenary-tagger/delete'] = array(
    'title' => 'Delete tag',
    'type' => MENU_CALLBACK,
    'access arguments' => array('tag centenary content'),
    'page callback' => 'cg_tag_delete',
    'page arguments' => array(3,4,5),
    'file' => 'centenary_tagger.inc',
  );
  return $items;
}

// Node filters
function cg_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array( t('Teaser filter'), 
                    t('Strip MSWord filter'),
                    t('Fix Baha\'i Names filter'), 
                  );
    case 'description':
      if ($delta == 0) return t('Substitutes teaser tags [teaser:132] with node teaser.');
       else if ($delta == 1) return t('Removes MSWord characters so they won\'t mess with typography and Markdown.');
       else if ($delta == 2) return t('Cleans up common misspellings of Baha\'i words and names');
    case 'no cache':
      return TRUE;
    case 'prepare':
      return $text;
    case 'settings':
      return;
    case 'process':
     if ($delta == 0) {
        if ($text = cg_filter_teasertag($text)) return $text;
     } 
     elseif ($delta == 1) {
       if ($text = cg_filter_strip_mscrap($text)) return $text;
     }
     elseif ($delta == 2) { 
      return cg_fix_bahai_words($text);
     }
    default:
      return $text;
  }
}

 
function cg_filter_strip_mscrap($text) {
 // open and closed quotes
 
 $replace = array (
   html_entity_decode('&#039;', ENT_COMPAT, 'UTF-8') => "'", // tough invisible single quote
   html_entity_decode('&#145;', ENT_COMPAT, 'UTF-8') => "'", // tough invisible single quote  
   html_entity_decode('&#146;', ENT_COMPAT, 'UTF-8') => "'", // tough invisible single quote 
   '&#039;' =>   "'",   
   '&#145;' =>   "'",
   '&#146;' =>   "'", 
   '‘'   =>   "'", 
   '`'   =>   "'",
   '’'   =>   "'",
   '’'   =>   "'",
   '“'   =>   '"',
   '”'   =>   '"',  
 );
 $text = str_replace(array_keys($replace), array_values($replace), $text); 
 /*
 $str = str_replace(chr(130), ',', $str);    // baseline single quote
$str = str_replace(chr(131), 'NLG', $str);  // florin
$str = str_replace(chr(132), '"', $str);    // baseline double quote
$str = str_replace(chr(133), '...', $str);  // ellipsis
$str = str_replace(chr(134), '**', $str);   // dagger (a second footnote)
$str = str_replace(chr(135), '***', $str);  // double dagger (a third footnote)
$str = str_replace(chr(136), '^', $str);    // circumflex accent
$str = str_replace(chr(137), 'o/oo', $str); // permile
$str = str_replace(chr(138), 'Sh', $str);   // S Hacek
$str = str_replace(chr(139), '<', $str);    // left single guillemet
// $str = str_replace(chr(140), 'OE', $str);   // OE ligature
$str = str_replace(chr(145), "'", $str);    // left single quote
$str = str_replace(chr(146), "'", $str);    // right single quote
// $str = str_replace(chr(147), '"', $str);    // left double quote
// $str = str_replace(chr(148), '"', $str);    // right double quote
$str = str_replace(chr(149), '-', $str);    // bullet
$str = str_replace(chr(150), '-–', $str);    // endash
$str = str_replace(chr(151), '--', $str);   // emdash
// $str = str_replace(chr(152), '~', $str);    // tilde accent
// $str = str_replace(chr(153), '(TM)', $str); // trademark ligature
$str = str_replace(chr(154), 'sh', $str);   // s Hacek
$str = str_replace(chr(155), '>', $str);    // right single guillemet
// $str = str_replace(chr(156), 'oe', $str);   // oe ligature
$str = str_replace(chr(159), 'Y', $str);    // Y Dieresis
$str = str_replace('°C', '&deg;C', $str);    // Celcius is used quite a lot so it makes sense to add this in
$str = str_replace('£', '&pound;', $str);
$str = str_replace("'", "'", $str);
$str = str_replace('"', '"', $str);
$str = str_replace('–', '&ndash;', $str);
 */
 // accent remover
 //$text = strtr($text, 'áéíóúàèìòùäëïöüÿâêîôûå', 'aeiouaeiouaeiouyaeioua' );  
 $search = explode(",","ç,æ,œ,á,é,í,ó,ú,à,è,ì,ò,ù,ä,ë,ï,ö,ü,ÿ,â,ê,î,ô,û,å,e,i,ø,u");
 $replace = explode(",","c,ae,oe,a,e,i,o,u,a,e,i,o,u,a,e,i,o,u,y,a,e,i,o,u,a,e,i,o,u");
 $text = str_replace($search, $replace, $text);
 return $text;
} 
  
  
function cg_fix_bahai_words($text) { 
  $bahai_words = array(   
    "Ba-Ha" => "Baha",
    "Ba-ha" => "Baha",
    "Baka"  => "Baha",
    "Baham"  => "Baha",
  
    "Abd-ul-Baha" => "Abdu'l-Baha", 
    "Abdul Allaho Abha" => "Abdu'l-Baha",
    "Abd-ul-Baha" => "Abdu'l-Baha",
    'Abdulbaha' => "Abdu'l-Baha",
    'Abdul-baha' => "Abdu'l-Baha",
    "Abdu'l-baha" => "Abdu'l-Baha",  
    "Abdu'l-Baha" => "Abdu'l-Baha", 
    'Abdul Baha' => "Abdu'l-Baha", 
    "Abdul Ba-ha" => "Abdu'l-Baha",
    "Abdul Ba ha" => "Abdu'l-Baha", 
    "Abdul-baha" => "Abdu'l-Baha",
    "Abdulbaha" => "Abdu'l-Baha",
    "Abdul baha" => "Abdu'l-Baha",
    "Abul-baha" => "Abdu'l-Baha",   
     
    "ABDUL BAHA" => "ABDU'L-BAHA",
    "ABDUL-BAHA" => "ABDU'L-BAHA", 
    
    "The Bam " => "The Bab ",
    "Abdas" => "Abbas", 
    
    'ABDU' => "'ABDU",
    "''ABDU" => "'ABDU",
    "Abdu" => "'Abdu",
    "''Abdu" => "'Abdu",
      
    "Bahists" => "Baha'is",
    "Bahaist" => "Baha'i",
    "Babaistic" => "Baha'i", 
    "Bahai" => "Baha'i",
    "ba-hai" => "Baha'i",
    "Ba-hai" => "Baha'i",
    "Baham"  => "Baha'i", 
    "Bahaic" => "Baha'i",    
    "Bahal" => "Baha'i", 
    
    "Bahaullah" => "Baha'u'llah",
    "Baba O'allah" => "Baha'u'llah",
    "Baha-Ollah" => "Baha'u'llah",
    "Baha'oullah" => "Baha'u'llah",
    "Baha u'Ullah" => "Baha'u'llah",
    "Baha O'Lallah" => "Baha'u'llah",
    "Baha Oullah" => "Baha'u'llah",
    "Baha-ollah" => "Baha'u'llah",
    "Baha-Ollah" => "Baha'u'llah",
    "Bahaollah"  => "Baha'u'llah",
    "Baha a' Llah" => "Baha'u'llah",
    "Bah-'o'llah" => "Baha'u'llah",
    'Behaullah' => "Baha'u'llah",
    'Baha-u-llah' => "Baha'u'llah",    
    'Baha-allah' => "Baha'u'llah",
    "Baha'o'llah" => "Baha'u'llah",
    "Baha Ollah" => "Baha'u'llah",
    "Ben Ullah" => "Baha'u'llah",
    "Baha'ollah" => "Baha'u'llah",    
    "Baha Ullah" => "Baha'u'llah",  
  );  
  $accents = array(
    // add accents in a few cases 
    "Baha'i" => "Bahá'í",     
    "Bab" => "Báb",  
    "Baha'u'llah" => "Bahá'u'lláh",
    "Abdu'l-Baha" => "Abdu'l-Bahá",
    "Baha" => "Bahá",   
  );
  
  // strip accents, curly quotes etc.
  $text = cg_filter_strip_mscrap($text); 
  // $text = str_replace('&#039;', "'", $text);  
  // $text = preg_replace('/[^ ]?Abd/', "Abd", $text); // remove any non-space before Abd
  // $text = preg_replace('/Abd/', "'Abd", $text); // add a single quote before Abd
  
  // fixes misspelled baha'i words 
  $text = str_replace(array_keys($bahai_words), array_values($bahai_words), $text);  
  $text = str_replace(array_keys($bahai_words), array_values($bahai_words), $text); 
  
  // add back in accents to Baha'i, Baha'u'llah and Abdu'l-Baha only
  $text = str_replace(array_keys($accents), array_values($accents), $text);   
 
  return $text;
}  

function cg_clean_bahai_title($title) {
  $title = cg_fix_bahai_words($title);
  if (module_exists('typogrify')) {
    include_once(drupal_get_path('module', 'typogrify') . '/typogrify.class.php');
    include_once(drupal_get_path('module', 'typogrify') . '/smartypants.php');    
    $title = Typogrify::filter($title);  
  }
  $title = trim(strip_tags($title));
  return $title;
}
   


function cg_filter_teasertag($text) {
  $matches = array();
      if (preg_match_all("#\[teaser:([\d]+):*(left|right)*\]#", $text, $matches, PREG_SET_ORDER)) {
        foreach ($matches as $match) {
          if ($node = node_load($match[1])) {
            if ($node->status) {
              if ($match[2]) $class = $match[2];
              $insert = '<div class="node node-teaser ' . check_plain($node->type) . ' ' . $class . '">' . node_view($node, TRUE, FALSE, FALSE) . '</div>';
              $text = str_replace($match[0], $insert, $text);
            }
            else {
              $text = str_replace($match[0], '', $text);
            }
          }
          else {
            $text = str_replace($match[0], '', $text);
          }
        }
      }
      return $text;
}

function cg_filter_tips($delta, $format, $long = FALSE) {
  if ($delta == 0) {
    return t('Inserting the a tag like [teaser:123] will print a node teaser in that location.  If you include a float direction, i.e. [teaser:123:right], the teaser will be floated in the direction specified.');
  }
  else if ($delta == 1) {
     return '';
  }  
}

function cg_nodeapi(&$node, $op, $teaser, $page) {
  if ($op == 'view' ) {
    // Wrap node body in a div
    $node->content['body']['#value'] = '<div class="node-body">' . $node->content['body']['#value'] . '</div>';
  }
  elseif ($op == 'presave') {
    // Save clip images to main_image field
    if (is_array($node->field_clip_img[0])) {
      $node->field_main_image[0] = array(
        'fid' => $node->field_clip_img[0]['fid'],
        'list' => 1,
        'data' => $node->field_clip_img[0]['data'],
      );
    }
    $node->moderate = (strlen($node->body) > 4000);
    // Email assigned editors
    if (!empty($node->field_editingassigned[0]['uid'])) {
      if ($oldnode = node_load($node->nid)) {
        if ($oldnode->field_editingassigned[0]['uid'] == $node->field_editingassigned[0]['uid']) {
          return;
        }
      }
      if ($account = user_load($node->field_editingassigned[0]['uid'])) {
        drupal_mail('cg', 'editorassigned', $account->mail, 'en', array('node' => $node));
      }
    }
  }
}

// Create mail message to assignees
function cg_mail($key, &$message, $params) {
  $node = $params['node'];
  $message['subject'] = '[centenary] Content assigned to you';
  $message['body'][] = 'The following content has been assigned to you:';
  $message['body'][] = "===================\n" .
    "$node->title\n" .
    "Status: {$node->field_editingstatus[0]['value']}\n" .
    "Notes: {$node->field_editingnotes[0]['value']}\n" .
    '===================';
  $message['body'][] = "View link: http://centenary.bahai.us/node/{$node->nid}";
  $message['body'][] = "Edit link: http://centenary.bahai.us/node/{$node->nid}/edit";
  $message['body'][] = "For a list of all content assigned to you, see http://centenary.bahai.us/editing/mine/" . $node->field_editingassigned[0]['uid'];
  $message['body'][] = "Thanks!\nThe Centenary Site Team";
}

function cg_form_node_type_form_alter(&$form, $form_state) {
  // Add options for superheader
  if (isset($form['identity']['type']['#default_value'])) {                     // determine node type
    $type = $form['identity']['type']['#default_value'];
  }
  else {
    $type = $form['identity']['type']['#value'];
  }
  $form['cg_options'] = array(                                                  // add form element
    '#type' => 'fieldset',
    '#title' => t('Centenary Options'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#access' => user_access('administer site configuration'),
  );
  $form['cg_options']['cg_superhead'] = array(
    '#type' => 'textfield',
    '#title' => t('Node super head'),
    '#default_value' => variable_get("cg_superhead_$type", ''),
    '#description' => t("You may optionally enter a super head for all nodes of type $type")
  );
  if (module_exists('token')) {
    $form['cg_options']['cg_teaserheader'] = array(
      '#type' => 'textfield',
      '#title' => t('Teaser header token'),
      '#default_value' => variable_get("cg_teaserheader_$type", variable_get('cg_teaserheaders', '[type-name]: [title]')),
      '#description' => t('You may optionally enter a token-based header to appear on teasers for this content type.  You may use the tokens specified below.'),
    );
    $form['cg_options']['token_help'] = array(
      '#title' => t('Replacement patterns'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['cg_options']['token_help']['help'] = array(
      '#value' => theme('token_help', 'node'),
    );
  }
}

function cg_form_alter(array &$form, array &$form_state, $form_id) {
  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] .'_node_form' == $form_id) {
    // Flag placement for cities
    if ($form['type']['#value'] == 'city') {
      $x = round($form['group_map_position']['field_pos_x'][0]['#default_value']['value'] / 2); 
      $y = round($form['group_map_position']['field_pos_y'][0]['#default_value']['value'] / 2);
      $show = $x || $y ? '' : ' display:none;';
      $flagtype = $form['group_map_position']['field_map_flag_type']['#default_value'][0]['value'];
      $flagtype = $flagtype ? $flagtype : 'map-pin-red';
      $flag = "
        <div class='travelmap-city' style='left:{$x}px; top:{$y}px;$show '>
        <div class='travelmap-city-marker'>
          <img src='/sites/all/themes/centenary/images/$flagtype.png' height=24 width=24 />
        </div></div>
      ";
      $form['group_map_position']['mappos'] = array(
        '#value' => '<style>.travelmap-city{position:absolute;height:1px;width:1px;}
                     .travelmap-city-marker{position:absolute;left:-5px;bottom:-8px;}
                     #travelmap-picker{position:relative;float:right;width:350px;}
                     </style>
                     <div id="travelmap-picker">
                     <img width="350" height="212" src="/sites/all/themes/centenary/images/map-large-4.jpg" />' . $flag . '
                     <div class="description">Click on the image to place the flag</div>
                     </div>',
        '#weight' => -100,
      );
      drupal_add_js(drupal_get_path('module', 'cg') . '/travelmap_picker.js');
    }
    if ($form['nid'] && in_array($form['type']['#value'], array('vignette', 'theme_overview', 'encounter', 'city'))) {
      $form['path']['pathauto_perform_alias']['#default_value'] = 0;
    }
  }
} /* */

function cg_perm() {
  return array(
    'tag centenary content',
  );
}

if (module_exists('nat')) {
  function cg_link($type, $object, $teaser = FALSE) {
    if ($type == 'node' && !$teaser) {
      if (is_array($object->taxonomy) && !empty($object->taxonomy)) {
        foreach ($object->taxonomy as $term) {
          if (in_array($term->vid, array(3, 5, 8))) {
            $tids[] = $term->tid;
          }
        }
        if (!empty($tids)) {
          $nids = nat_get_nids($tids);
          if (is_array($nids) && !empty($nids)) {
            $thisnid = $object->nid;
            if (user_access('tag centenary content')) {
              drupal_add_js(drupal_get_path('module', 'cg') . '/centenary_tagger.js', 'module', 'footer');
            }
            foreach ($nids as $nid => $title) {
              if (db_result(db_query("SELECT status FROM {node} WHERE nid = %d", $nid)) || user_access('tag centenary content')) {
                if (user_access('tag centenary content')) {
                  $token = drupal_get_token("delete $thisnid $nid");
                  $links["cg_term_delete natnode-$nid"] = array(
                    'href' => "admin/centenary-tagger/delete/$thisnid/$nid/$token",
                    'title' => 'x',
                  );
                }
                $links["cg_term_links natnode-$nid"] = array(
                  'href' => "node/$nid",
                  'title' => $title,
                  'html' => FALSE,
                );
              }
            }
          }
          return $links;
        }
      }
    }
  }
}

function cg_views_query_alter(&$view, &$query) {
  if ($view->name == 'daily') {
    $query->where['date']['clauses'][0] = "node_data_field_historical_date.field_historical_date_value = '%s'";
    $date = $query->where['date']['args'][0] = $view->args[0] . 'T00:00:00';
    if ($view->display_handler->display->id == 'page') {
      $view->args[0] . 'T00:00:00';
      $testdate = ($date == '1912-01-01T00:00:00') ? '1913-01-01T00:00:00' : $date;
      $prevdate = db_result(db_query("SELECT field_historical_date_value FROM {content_field_historical_date} d
        LEFT JOIN {node} n USING (vid)
        WHERE n.status = 1 AND d.field_historical_date_value < '%s' ORDER BY d.field_historical_date_value DESC", $testdate));
      $prevdate = str_replace('T00:00:00', '', $prevdate);
      $prevtext = format_date(strtotime($prevdate), 'custom', 'F j');
      $prevlink = '<div class="header-link prev">' . l("<< $prevtext", "daily/$prevdate") . '</div>';
      $testdate = ($date == '1912-12-31T00:00:00') ? '1911-12-31T00:00:00' : $date;
      $nextdate = db_result(db_query("SELECT field_historical_date_value FROM {content_field_historical_date} d
        LEFT JOIN {node} n USING (vid)
        WHERE n.status = 1 AND d.field_historical_date_value > '%s' ORDER BY d.field_historical_date_value ASC", $testdate));
      $nextdate = str_replace('T00:00:00', '', $nextdate);
      $nexttext = format_date(strtotime($nextdate), 'custom', 'F j');
      $nextlink = '<div class="header-link next">' . l("$nexttext >>", "daily/$nextdate") . '</div>';
      $view->display_handler->options['header'] = $prevlink . $nextlink . '<h1 class="headline">The Daily Centenarian</h1>';
      $view->display_handler->options['header_format'] = 2;
      $view->display_handler->options['header_empty'] = 1;
      drupal_add_js(drupal_get_path('module', 'cg') . '/dailyview.js');
    }
  }
}
