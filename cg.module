<?php

// $Id$

function cg_menu() {
  $items['admin/settings/centenary/migrate'] = array(
    'title' => 'Migrate - Aug 9',
    'description' => 'Custom settings for centenary site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cg_migrate_nodes'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

function cg_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array(0 => t('Teaser filter'));
    case 'description':
      return t('Substitutes teaser tags [teaser:123] with node teaser.');
    case 'no cache':
      return TRUE;
    case 'prepare':
      return $text;
    case 'settings':
      return;
    case 'process':
      $matches = array();
      if (preg_match_all("#\[teaser:([\d]+):*(left|right)*\]#", $text, $matches, PREG_SET_ORDER)) {
        foreach ($matches as $match) {
          if ($node = node_load($match[1])) {
            if ($match[2]) $class = $match[2];
            $insert = '<div class="node node-teaser ' . check_plain($node->type) . ' ' . $class . '">' . node_view($node, TRUE, FALSE, FALSE) . '</div>';
            $text = str_replace($match[0], $insert, $text);
          }
          else {
            $text = str_replace($match[0], '', '$text');
          }
        }
      }
      return $text;
    default:
      return $text;
  }
}
function cg_filter_tips($delta, $format, $long = FALSE) {
  return t('Inserting the a tag like [teaser:123] will print a node teaser in that location.  If you include a float direction, i.e. [teaser:123:right], the teaser will be floated in the direction specified.');
}

function cg_nodeapi(&$node, $op, $teaser, $page) {
  if ($op == 'view' ) {
    $node->content['body']['#value'] = '<div class="node-body">' . $node->content['body']['#value'] . '</div>';
  }
  elseif ($op == 'presave' && $node->type == 'clip') {
    $node->field_main_image[0] = array(
      'fid' => $node->field_clip_img[0]['fid'],
      'list' => 1,
      'data' => $node->field_clip_img[0]['data'],
    );
  }
}

function cg_form_node_type_form_alter(&$form, $form_state) {
  // Built in content types do not allow changes to type machine name.
    if (isset($form['identity']['type']['#default_value'])) {
      $type = $form['identity']['type']['#default_value'];
    }
    else {
      $type = $form['identity']['type']['#value'];
    }
  if (module_exists('token')) {
    $form['#submit'][] = 'cg_node_type_form_submit_teaserheaders';
    $form['teaserheader'] = array(
      '#type' => 'fieldset',
      '#title' => t('Teaser Headers'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#access' => user_access('administer site configuration'),
    );
    $form['teaserheader']['cg_teaserheader'] = array(
      '#type' => 'textfield',
      '#title' => t('Teaser header token'),
      '#default_value' => variable_get("cg_teaserheader_$type", variable_get('cg_teaserheaders', '[type-name]: [title]')),
      '#description' => t('You may optionally enter a token-based header to appear on teasers for this content type.  You may use the tokens specified below.'),
    );
    $form['teaserheader']['token_help'] = array(
      '#title' => t('Replacement patterns'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['teaserheader']['token_help']['help'] = array(
      '#value' => theme('token_help', 'node'),
    );
  }
}

function cg_form_city_node_form_alter(&$form, $form_state) {
  if ($_GLOBALS['user']['name'] == 'david') drupal_add_js(drupal_get_path('module', 'cg') . '/map_coord_pick.js');
}

/*
function cg_form_alter(array &$form, array &$form_state, $form_id) {
  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] .'_node_form' == $form_id) {
    $node = node_load(array('nid' => $form['#node']->nid ));
    dsm($node);
  }
} /* */

function cg_migrate_nodes() {
  $form['text'] = array(
    '#value' => 'This will perform the following tasks:
                  <ul><li>switch date fields over to a standard date field (press clips, talks)</li>
                  <li>switch location fields over to a node location (press clips, talks)</li></ul>'
  );
  $form['submit'] = array('#type' => 'submit', '#value' => 'execute');
  return $form;
}

function cg_migrate_nodes_submit(&$form, $form_state) {
  $batch = array(
    'title' => t('Migrating'),
    'operations' => array(
      array('cg_process_nodes', array()),
    ),
    'finished' => 'cg_process_nodes_finished',
  );
  batch_set($batch);
}

function cg_process_nodes(&$context) {
  if (empty($context['sandbox'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;
    $context['sandbox']['max'] = db_result(db_query("SELECT COUNT(DISTINCT nid) FROM {node} WHERE type IN ('talk', 'clip')"));
  }
  $limit = 5;
  $result = db_query_range("SELECT nid FROM {node} WHERE type IN ('talk', 'clip') AND nid > %d ORDER BY nid ASC", $context['sandbox']['current_node'], 0, $limit);
  while ($row = db_fetch_array($result)) {
    $node = node_load($row['nid'], NULL, TRUE);
    $context['sandbox']['progress']++;
    $context['sandbox']['current_node'] = $node->nid;
    $context['message'] = $node->title;
    $link = xmlsitemap_node_create_link($node);
    $link['status'] = 1;
    $link['priority'] = 0.5;
    $node->xmlsitemap = $link;
    if (!is_array($node->locations[0])) {
      drupal_set_message("<a href='/node/$node->nid/edit'>Node $node->nid is missing a location</a>");
    }
    if ($node->type == 'talk') {
      if (!is_array($node->field_talkdate[0])) drupal_set_message("<a href='/node/$node->nid/edit'>Node $node->nid is missing a date</a>");
      $node->locations[0] = @array_merge($node->locations[0], array_filter($node->field_talkloc[0]));
      $node->field_historical_date[0] = array('value' => $node->field_talkdate[0]['value']);
    }
    elseif ($node->type == 'clip') {
      if (!is_array($node->field_pubdate[0])) drupal_set_message("<a href='/node/$node->nid/edit'>Node $node->nid is missing a date</a>");
      $node->locations[0] = @array_merge($node->locations[0], array_filter($node->field_publocation[0]));
      $node->field_historical_date[0] = array('value' => $node->field_pubdate[0]['value']);
    }
    node_save($node);
    $context['results'][] = $node->nid .' : '. l(check_plain($node->title), "node/$node->nid/edit");
  }
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

function cg_process_nodes_finished($success, $results, $operations) {
  if ($success) {
    $message = format_plural(count($results), 'One post processed.', '@count posts processed.');
  }
  else {
    $message = t('Finished with an error.');
  }
  drupal_set_message($message);
  // Providing data for the redirected page is done through $_SESSION.
  foreach ($results as $result) {
    $message = t('Migrated node !title.', array('!title' => $result));
    drupal_set_message($message);
    $items[] = $message;
  }
  $_SESSION['my_batch_results'] = $items;
}/* */

